name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Download dependencies
      run: go mod download
      
    - name: Verify Go modules
      run: go mod verify
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        echo "Go version: $(go version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "cmd/loadtester contents:"
        ls -la cmd/loadtester/
        
        mkdir -p dist
        BINARY_NAME="loadtester-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        echo "Building binary: ${BINARY_NAME}"
        go build -v -ldflags "-s -w -X main.version=${{ steps.version.outputs.version }}" \
          -o "dist/${BINARY_NAME}" ./cmd/loadtester
        
        echo "Build completed. Checking result:"
        ls -la dist/
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: loadtester-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create checksums
      run: |
        find . -name "loadtester-*" -type f -exec sha256sum {} \; > checksums.txt
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          loadtester-*/loadtester-*
          checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
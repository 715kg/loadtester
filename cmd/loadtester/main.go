package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"html/template"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/715kg/loadtester/internal/loadtest"
	"github.com/715kg/loadtester/internal/templates"
	"github.com/715kg/loadtester/pkg/info"
)

// –í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
var version = "dev"

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
var (
	buildTime = "unknown"
	gitCommit = "unknown"
	buildUser = "unknown"
)

func main() {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	showVersion := flag.Bool("version", false, "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã")
	flag.Parse()

	if *showVersion {
		fmt.Printf("Load Tester %s\n", version)
		fmt.Printf("–ê–≤—Ç–æ—Ä: %s\n", info.Author)
		fmt.Printf("–õ–∏—Ü–µ–Ω–∑–∏—è: %s\n", info.License)
		fmt.Printf("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: %s\n", info.Purpose)
		fmt.Printf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n", info.Category)
		fmt.Printf("–°–∞–π—Ç: %s\n", info.Website)
		if buildTime != "unknown" {
			fmt.Printf("–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: %s\n", buildTime)
		}
		if gitCommit != "unknown" {
			fmt.Printf("Git –∫–æ–º–º–∏—Ç: %s\n", gitCommit)
		}
		fmt.Println("\n–≠—Ç–æ –ª–µ–≥–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
		fmt.Println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:         ":8081",
		ReadTimeout:  30 * time.Second,
		WriteTimeout: 30 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	http.HandleFunc("/", serveHTML)
	http.HandleFunc("/start", handleStart)
	http.HandleFunc("/stop", handleStop)
	http.HandleFunc("/stats", handleStats)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	sigChan := make(chan os.Signal, 1)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	// SIGINT (Ctrl+C) - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
	signal.Notify(sigChan, os.Interrupt)

	// –î–æ–±–∞–≤–ª—è–µ–º SIGTERM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (Unix-like —Å–∏—Å—Ç–µ–º—ã)
	signal.Notify(sigChan, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		fmt.Printf("üöÄ %s %s –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8081\n", info.ProgramName, version)
		fmt.Printf("üìù –ê–≤—Ç–æ—Ä: %s | –õ–∏—Ü–µ–Ω–∑–∏—è: %s\n", info.Author, info.License)
		fmt.Printf("üéØ %s\n", info.ProgramDescription)
		fmt.Println("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –≤—ã—à–µ")
		fmt.Println("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
		fmt.Println("‚ÑπÔ∏è  –≠—Ç–æ –ª–µ–≥–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
			os.Exit(1)
		}
	}()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan

	fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
	stopCurrentTest()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Graceful shutdown —Å–µ—Ä–≤–µ—Ä–∞
	if err := server.Shutdown(ctx); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func serveHTML(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.New("index").Parse(templates.HTMLTemplate))
	data := struct {
		Version string
	}{
		Version: version,
	}
	tmpl.Execute(w, data)
}

func handleStart(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var config loadtest.Config
	if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error(),
		})
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ loadtest –ø–∞–∫–µ—Ç–∞
	if err := loadtest.Start(&config); err != nil {
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   err.Error(),
		})
		return
	}

	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
	})
}

func handleStop(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ loadtest –ø–∞–∫–µ—Ç–∞
	loadtest.Stop()

	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
	})
}

func handleStats(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ loadtest –ø–∞–∫–µ—Ç–∞
	stats := loadtest.GetStats()

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(stats)
}

// stopCurrentTest –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è —Ç–µ—Å—Ç
func stopCurrentTest() {
	if loadtest.IsRunning() {
		fmt.Println("‚èπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è —Ç–µ—Å—Ç...")
		loadtest.Stop()

		// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ç–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
		time.Sleep(2 * time.Second)

		fmt.Println("‚úÖ –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
}
